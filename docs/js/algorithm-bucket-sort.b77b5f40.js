(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["algorithm-bucket-sort"],{"09cf":function(t,e,n){"use strict";var r=n("f5bd"),a=n.n(r);a.a},"0d03":function(t,e,n){var r=n("6eeb"),a=Date.prototype,i="Invalid Date",o="toString",u=a[o],c=a.getTime;new Date(NaN)+""!=i&&r(a,o,(function(){var t=c.call(this);return t===t?u.call(this):i}))},"99b4":function(t,e,n){"use strict";n.r(e);var r=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"bucket"},[n("Title",[t._v("计数算法")]),n("el-tabs",{staticClass:"bucket-tabs",model:{value:t.activeName,callback:function(e){t.activeName=e},expression:"activeName"}},[n("el-tab-pane",{attrs:{label:"桶排序",name:"nativeBucket"}},[n("el-button",{attrs:{type:"primary"},on:{click:t.testNativeEfficiency}},[t._v(" 执行桶排序算法 ")])],1)],1),n("codemirror",{staticStyle:{height:"600px"},attrs:{value:t.JsCode,readonly:""}})],1)},a=[],i=(n("0d03"),n("d3b7"),n("284c")),o={data:function(){return{activeName:"nativeBucket",JsCode:"",nativeSort:"桶排序算法：\n// 主方法\nfunction bucketSort (array, bucketSize = 5) {\n  if (array.length < 2) {\n    return array\n  }\n  const buckets = createBuckets(array, bucketSize)\n  array = sortBuckets(buckets)\n  return array\n}\n// 创建桶，并填入元素\nfunction createBuckets (array, bucketSize) {\n  let minValue = array[0]\n  let maxValue = array[0]\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < minValue) {\n      minValue = array[i]\n    } else if (array[i] > maxValue) {\n      maxValue = array[i]\n    }\n  }\n  const bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1\n  const buckets = []\n  for (let i = 0; i < bucketCount; i++) {\n    buckets[i] = []\n  }\n  for (let i = 0; i < array.length; i++) {\n    const bucketIndex = Math.floor((array[i] - minValue) / bucketSize)\n    buckets[bucketIndex].push(array[i])\n  }\n  return buckets\n}\n// 对每个桶进行排序\nfunction sortBuckets (buckets) {\n  const sortedArray = []\n  for (let i = 0; i < buckets.length; i++) {\n    if (buckets[i].length !== 0) {\n      buckets[i] = insertSort(buckets[i], defaultCompare)\n      sortedArray.push(...buckets[i])\n    }\n  }\n  return sortedArray\n}\n// 插入排序算法\nfunction insertSort (array, compareFn = defaultCompare) {\n  const { length } = array\n  let temp\n  for (let i = 1; i < length; i++) {\n    let j = i\n    temp = array[i]\n    while (j > 0 && compareFn(array[j-1], temp) === 'Compare.BIGGER_THAN') {\n      array[j] = array[j - 1]\n      j--\n    }\n    array[j] = temp\n  }\n  return array\n}\n// 比较算法\nfunction defaultCompare (a, b) {\n  return a < b ? 'Compare.LESS_THAN' : 'Compare.BIGGER_THAN'\n}\n// 交换算法\nfunction swap (array, a, b) {\n  [array[a], array[b]] = [array[b], array[a]]\n}"}},watch:{activeName:{handler:function(){this.JsCode=this.nativeSort},immediate:!0}},methods:{testNativeEfficiency:function(){var t=this.randomNumber(),e=(new Date).getTime();t=this.bucketSort(t,10);var n=(new Date).getTime();this.JsCode=this.JsCode+"\n桶排序算法耗时："+(n-e)+"ms",console.log(t)},bucketSort:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5;if(t.length<2)return t;var n=this.createBuckets(t,e);return this.sortBuckets(n)},createBuckets:function(t,e){for(var n=t[0],r=t[0],a=1;a<t.length;a++)t[a]<n?n=t[a]:t[a]>r&&(r=t[a]);for(var i=Math.floor((r-n)/e)+1,o=[],u=0;u<i;u++)o[u]=[];for(var c=0;c<t.length;c++){var s=Math.floor((t[c]-n)/e);o[s].push(t[c])}return o},sortBuckets:function(t){for(var e=[],n=0;n<t.length;n++)0!==t[n].length&&(t[n]=this.insertSort(t[n],this.defaultCompare),e.push.apply(e,Object(i["a"])(t[n])));return e},insertSort:function(t){for(var e,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.defaultCompare,r=t.length,a=1;a<r;a++){var i=a;e=t[a];while(i>0&&"Compare.BIGGER_THAN"===n(t[i-1],e))t[i]=t[i-1],i--;t[i]=e}return t},defaultCompare:function(t,e){return t<e?"Compare.LESS_THAN":"Compare.BIGGER_THAN"},swap:function(t,e,n){var r=[t[n],t[e]];t[e]=r[0],t[n]=r[1]},randomNumber:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e4,n=0;n<e;n++)t.push(Math.floor(Math.random()*e)+1);return t}},components:{Title:function(){return n.e("components-title").then(n.bind(null,"6968"))}}},u=o,c=(n("09cf"),n("2877")),s=Object(c["a"])(u,r,a,!1,null,null,null);e["default"]=s.exports},f5bd:function(t,e,n){}}]);
//# sourceMappingURL=algorithm-bucket-sort.b77b5f40.js.map