{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.date.to-string.js","webpack:///./src/views/algorithm/mergeSort.vue?25d1","webpack:///src/views/algorithm/mergeSort.vue","webpack:///./src/views/algorithm/mergeSort.vue?7d98","webpack:///./src/views/algorithm/mergeSort.vue","webpack:///./src/views/algorithm/mergeSort.vue?efc2","webpack:///./node_modules/core-js/modules/es.array.slice.js"],"names":["redefine","DatePrototype","Date","prototype","INVALID_DATE","TO_STRING","nativeDateToString","getTime","NaN","value","call","this","render","_vm","_h","$createElement","_c","_self","staticClass","_v","model","callback","$$v","activeName","expression","attrs","on","testNativeEfficiency","testUpgradeEfficiency","staticStyle","JsCode","staticRenderFns","data","nativeMerge","upgrademerge","watch","handler","immediate","methods","array","mergeSort","defaultCompare","end","start","console","log","upgradeMergeSort","length","merge","left","right","compareFn","i","j","result","push","concat","slice","upgradeMerge","a","b","swap","randomNumber","Math","floor","random","n","components","Title","component","$","isObject","isArray","toAbsoluteIndex","toLength","toIndexedObject","createProperty","arrayMethodHasSpeciesSupport","wellKnownSymbol","SPECIES","nativeSlice","max","target","proto","forced","Constructor","O","k","fin","undefined","constructor","Array"],"mappings":"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","file":"js/algorithm-merge-sort.5a188599.js","sourcesContent":["var redefine = require('../internals/redefine');\n\nvar DatePrototype = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar nativeDateToString = DatePrototype[TO_STRING];\nvar getTime = DatePrototype.getTime;\n\n// `Date.prototype.toString` method\n// https://tc39.github.io/ecma262/#sec-date.prototype.tostring\nif (new Date(NaN) + '' != INVALID_DATE) {\n  redefine(DatePrototype, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? nativeDateToString.call(this) : INVALID_DATE;\n  });\n}\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"merge\"},[_c('Title',[_vm._v(\"归并算法\")]),_c('el-tabs',{staticClass:\"merge-tabs\",model:{value:(_vm.activeName),callback:function ($$v) {_vm.activeName=$$v},expression:\"activeName\"}},[_c('el-tab-pane',{attrs:{\"label\":\"原生归并\",\"name\":\"nativeMerge\"}},[_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.testNativeEfficiency}},[_vm._v(\" 执行原生归并算法 \")])],1),_c('el-tab-pane',{attrs:{\"label\":\"改进归并\",\"name\":\"upgrademerge\"}},[_c('el-button',{attrs:{\"type\":\"primary\"},on:{\"click\":_vm.testUpgradeEfficiency}},[_vm._v(\" 执行原生归并算法 \")])],1)],1),_c('codemirror',{staticStyle:{\"height\":\"600px\"},attrs:{\"value\":_vm.JsCode,\"readonly\":\"\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div class=\"merge\">\n    <Title>归并算法</Title>\n    <el-tabs\n      class=\"merge-tabs\"\n      v-model=\"activeName\">\n      <el-tab-pane\n        label=\"原生归并\"\n        name=\"nativeMerge\">\n        <el-button\n          type=\"primary\"\n          @click=\"testNativeEfficiency\">\n          执行原生归并算法\n        </el-button>\n      </el-tab-pane>\n      <el-tab-pane\n        label=\"改进归并\"\n        name=\"upgrademerge\">\n        <el-button\n          type=\"primary\"\n          @click=\"testUpgradeEfficiency\">\n          执行原生归并算法\n        </el-button>\n      </el-tab-pane>\n    </el-tabs>\n    <codemirror\n      :value=\"JsCode\"\n      style=\"height: 600px\"\n      readonly>\n    </codemirror>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      activeName: 'nativeMerge',\n      JsCode: '',\n      nativeMerge: `原生归并：\n// 将大数组转化为多个小数组直到其中只有一个项\nfunction mergeSort (array, compareFn = defaultCompare) {\n  if (array.length > 1) {\n    const { length } = array\n    const middle = Math.floor(length / 2)\n    const left = mergeSort(array.slice(0, middle), compareFn)\n    const right = mergeSort(array.slice(middle, length), compareFn)\n    array = merge(left, right, compareFn)\n  }\n  return array\n}\n// 合并数组\nfunction merge (left, right, compareFn) {\n  let i = 0\n  let j = 0\n  const result = []\n  while (i < left.length && j < right.length) {\n    result.push(\n      compareFn(left[i], right[j]) === 'Compare.LESS_THAN' ? left[i++] : right[j++]\n    )\n  }\n  return result.concat(i < left.length ? left.slice(i) : right.slice(j))\n}`,\n      upgrademerge: `改进归并：\nfunction MergeSort (array, compareFn = defaultCompare) {\n  const { length } = array\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - 1 - i; j++) {\n      if (compareFn(array[j], array[j + 1]) === 'Compare.BIGGER_THAN') {\n        swap(array, j, j + 1)\n      }\n    }\n  }\n}`\n    }\n  },\n  watch: {\n    activeName: {\n      handler () {\n        if (this.activeName === 'nativeMerge') {\n          this.JsCode = this.nativeMerge\n        } else if (this.activeName === 'upgrademerge') {\n          this.JsCode = this.upgrademerge\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    testNativeEfficiency () {\n      let array = this.randomNumber()\n      // 打印执行时间，以得到算法效率\n      let start = new Date().getTime()\n      array = this.mergeSort(array, this.defaultCompare)\n      let end = new Date().getTime()\n      this.JsCode = this.JsCode + '\\n归并排序算法耗时：' + (end - start) + 'ms'\n      console.log(array)\n    },\n    testUpgradeEfficiency () {\n      let array = this.randomNumber()\n      // 打印执行时间，以得到算法效率\n      let start = new Date().getTime()\n      this.upgradeMergeSort(array, this.defaultCompare)\n      let end = new Date().getTime()\n      this.JsCode = this.JsCode + '\\n归并排序算法耗时：' + (end - start) + 'ms'\n      console.log(array)\n    },\n    // 将大数组转化为多个小数组直到其中只有一个项\n    mergeSort (array, compareFn = this.defaultCompare) {\n      if (array.length > 1) {\n        const { length } = array\n        const middle = Math.floor(length / 2)\n        const left = this.mergeSort(array.slice(0, middle), compareFn)\n        const right = this.mergeSort(array.slice(middle, length), compareFn)\n        array = this.merge(left, right, compareFn)\n      }\n      return array\n    },\n    // 合并数组\n    merge (left, right, compareFn) {\n      let i = 0\n      let j = 0\n      const result = []\n      while (i < left.length && j < right.length) {\n        result.push(\n          compareFn(left[i], right[j]) === 'Compare.LESS_THAN' ? left[i++] : right[j++]\n        )\n      }\n      return result.concat(i < left.length ? left.slice(i) : right.slice(j))\n    },\n    // 将大数组转化为多个小数组直到其中只有一个项\n    upgradeMergeSort (array, compareFn = this.defaultCompare) {\n      if (array.length > 1) {\n        const { length } = array\n        const middle = Math.floor(length / 2)\n        const left = this.mergeSort(array.slice(0, middle), compareFn)\n        const right = this.mergeSort(array.slice(middle, length), compareFn)\n        array = this.upgradeMerge(left, right, compareFn)\n      }\n      return array\n    },\n    // 合并数组\n    upgradeMerge (left, right, compareFn) {\n      let i = 0\n      let j = 0\n      const result = []\n      if (left[left.length] <= right[0]) {\n        return result.concat(left).concat(right)\n      } else if (left[0] >= right[right.length]) {\n        return result.concat(right).concat(left)\n      }\n      while (i < left.length && j < right.length) {\n        result.push(\n          compareFn(left[i], right[j]) === 'Compare.LESS_THAN' ? left[i++] : right[j++]\n        )\n      }\n      return result.concat(i < left.length ? left.slice(i) : right.slice(j))\n    },\n    defaultCompare (a, b) {\n      return a < b ? 'Compare.LESS_THAN' : 'Compare.BIGGER_THAN'\n    },\n    swap (array, a, b) {\n      [array[a], array[b]] = [array[b], array[a]]\n    },\n    randomNumber (array = [], n = 1000000) {\n      for (let i = 0; i < n; i++) {\n        array.push(Math.floor(Math.random() * n) + 1)\n      }\n      return array\n    }\n  },\n  components: {\n    Title: () => import('@/components/title' /* webpackChunkName: \"components-title\" */)\n  }\n}\n</script>\n\n<style lang=\"less\">\n.merge {\n  &-tabs {\n    margin-bottom: 20px;\n  }\n}\n</style>\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mergeSort.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mergeSort.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./mergeSort.vue?vue&type=template&id=1e2cdbf5&\"\nimport script from \"./mergeSort.vue?vue&type=script&lang=js&\"\nexport * from \"./mergeSort.vue?vue&type=script&lang=js&\"\nimport style0 from \"./mergeSort.vue?vue&type=style&index=0&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mergeSort.vue?vue&type=style&index=0&lang=less&\"; export default mod; export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--10-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--10-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--10-oneOf-1-2!../../../node_modules/less-loader/dist/cjs.js??ref--10-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./mergeSort.vue?vue&type=style&index=0&lang=less&\"","'use strict';\nvar $ = require('../internals/export');\nvar isObject = require('../internals/is-object');\nvar isArray = require('../internals/is-array');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\nvar toLength = require('../internals/to-length');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar createProperty = require('../internals/create-property');\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar SPECIES = wellKnownSymbol('species');\nvar nativeSlice = [].slice;\nvar max = Math.max;\n\n// `Array.prototype.slice` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.slice\n// fallback for not array-like ES3 strings and DOM objects\n$({ target: 'Array', proto: true, forced: !arrayMethodHasSpeciesSupport('slice') }, {\n  slice: function slice(start, end) {\n    var O = toIndexedObject(this);\n    var length = toLength(O.length);\n    var k = toAbsoluteIndex(start, length);\n    var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n    var Constructor, result, n;\n    if (isArray(O)) {\n      Constructor = O.constructor;\n      // cross-realm fallback\n      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {\n        Constructor = undefined;\n      } else if (isObject(Constructor)) {\n        Constructor = Constructor[SPECIES];\n        if (Constructor === null) Constructor = undefined;\n      }\n      if (Constructor === Array || Constructor === undefined) {\n        return nativeSlice.call(O, k, fin);\n      }\n    }\n    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);\n    result.length = n;\n    return result;\n  }\n});\n"],"sourceRoot":""}